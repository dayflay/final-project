Index: bomb_phases.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#################################\n# CSC 102 Defuse the Bomb Project\n# GUI and Phase class definitions\n# Team: \n#################################\n\n# import the configs\nfrom bomb_configs import *\n# other imports\nfrom tkinter import *\nimport tkinter\nfrom threading import Thread\nfrom time import sleep\nimport os\nimport sys\n\n#########\n# classes\n#########\n# the LCD display GUI\nclass Lcd(Frame):\n    def __init__(self, window):\n        super().__init__(window, bg=\"black\")\n        # make the GUI fullscreen\n        window.attributes(\"-fullscreen\", True)\n        # we need to know about the timer (7-segment display) to be able to pause/unpause it\n        self._timer = None\n        # we need to know about the pushbutton to turn off its LED when the program exits\n        self._button = None\n        # setup the initial \"boot\" GUI\n        self.setupBoot()\n\n    # sets up the LCD \"boot\" GUI\n    def setupBoot(self):\n        # set column weights\n        self.columnconfigure(0, weight=1)\n        self.columnconfigure(1, weight=2)\n        self.columnconfigure(2, weight=1)\n        # the scrolling informative \"boot\" text\n        self._lscroll = Label(self, bg=\"black\", fg=\"white\", font=(\"Courier New\", 14), text=\"\", justify=LEFT)\n        self._lscroll.grid(row=0, column=0, columnspan=3, sticky=W)\n        self.pack(fill=BOTH, expand=True)\n\n    # sets up the LCD GUI\n    def setup(self):\n        # the timer\n        self._ltimer = Label(self, bg=\"black\", fg=\"#00ff00\", font=(\"Courier New\", 18), text=\"Time left: \")\n        self._ltimer.grid(row=1, column=0, columnspan=3, sticky=W)\n        # the keypad passphrase\n        self._lkeypad = Label(self, bg=\"black\", fg=\"#00ff00\", font=(\"Courier New\", 18), text=\"Keypad phase: \")\n        self._lkeypad.grid(row=2, column=0, columnspan=3, sticky=W)\n        # the jumper wires status\n        self._lwires = Label(self, bg=\"black\", fg=\"#00ff00\", font=(\"Courier New\", 18), text=\"Wires phase: \")\n        self._lwires.grid(row=3, column=0, columnspan=3, sticky=W)\n        # the pushbutton status\n        self._lbutton = Label(self, bg=\"black\", fg=\"#00ff00\", font=(\"Courier New\", 18), text=\"Button phase: \")\n        self._lbutton.grid(row=4, column=0, columnspan=3, sticky=W)\n        # the toggle switches status\n        self._ltoggles = Label(self, bg=\"black\", fg=\"#00ff00\", font=(\"Courier New\", 18), text=\"Toggles phase: \")\n        self._ltoggles.grid(row=5, column=0, columnspan=2, sticky=W)\n        # the strikes left\n        self._lstrikes = Label(self, bg=\"black\", fg=\"#00ff00\", font=(\"Courier New\", 18), text=\"Strikes left: \")\n        self._lstrikes.grid(row=5, column=2, sticky=W)\n        if (SHOW_BUTTONS):\n            # the pause button (pauses the timer)\n            self._bpause = tkinter.Button(self, bg=\"red\", fg=\"white\", font=(\"Courier New\", 18), text=\"Pause\", anchor=CENTER, command=self.pause)\n            self._bpause.grid(row=6, column=0, pady=40)\n            # the quit button\n            self._bquit = tkinter.Button(self, bg=\"red\", fg=\"white\", font=(\"Courier New\", 18), text=\"Quit\", anchor=CENTER, command=self.quit)\n            self._bquit.grid(row=6, column=2, pady=40)\n\n    # lets us pause/unpause the timer (7-segment display)\n    def setTimer(self, timer):\n        self._timer = timer\n\n    # lets us turn off the pushbutton's RGB LED\n    def setButton(self, button):\n        self._button = button\n\n    # pauses the timer\n    def pause(self):\n        if (RPi):\n            self._timer.pause()\n\n    # setup the conclusion GUI (explosion/defusion)\n    def conclusion(self, success=False):\n        # destroy/clear widgets that are no longer needed\n        self._lscroll[\"text\"] = \"\"\n        self._ltimer.destroy()\n        self._lkeypad.destroy()\n        self._lwires.destroy()\n        self._lbutton.destroy()\n        self._ltoggles.destroy()\n        self._lstrikes.destroy()\n        if (SHOW_BUTTONS):\n            self._bpause.destroy()\n            self._bquit.destroy()\n\n        # reconfigure the GUI\n        # the retry button\n        self._bretry = tkinter.Button(self, bg=\"red\", fg=\"white\", font=(\"Courier New\", 18), text=\"Retry\", anchor=CENTER, command=self.retry)\n        self._bretry.grid(row=1, column=0, pady=40)\n        # the quit button\n        self._bquit = tkinter.Button(self, bg=\"red\", fg=\"white\", font=(\"Courier New\", 18), text=\"Quit\", anchor=CENTER, command=self.quit)\n        self._bquit.grid(row=1, column=2, pady=40)\n\n    # re-attempts the bomb (after an explosion or a successful defusion)\n    def retry(self):\n        # re-launch the program (and exit this one)\n        os.execv(sys.executable, [\"python3\"] + [sys.argv[0]])\n        exit(0)\n\n    # quits the GUI, resetting some components\n    def quit(self):\n        if (RPi):\n            # turn off the 7-segment display\n            self._timer._running = False\n            self._timer._component.blink_rate = 0\n            self._timer._component.fill(0)\n            # turn off the pushbutton's LED\n            for pin in self._button._rgb:\n                pin.value = True\n        # exit the application\n        exit(0)\n\n# template (superclass) for various bomb components/phases\nclass PhaseThread(Thread):\n    def __init__(self, name, component=None, target=None):\n        super().__init__(name=name, daemon=True)\n        # phases have an electronic component (which usually represents the GPIO pins)\n        self._component = component\n        # phases have a target value (e.g., a specific combination on the keypad, the proper jumper wires to \"cut\", etc)\n        self._target = target\n        # phases can be successfully defused\n        self._defused = False\n        # phases can be failed (which result in a strike)\n        self._failed = False\n        # phases have a value (e.g., a pushbutton can be True/Pressed or False/Released, several jumper wires can be \"cut\"/False, etc)\n        self._value = None\n        # phase threads are either running or not\n        self._running = False\n\n# the timer phase\nclass Timer(PhaseThread):\n    def __init__(self, component, initial_value, name=\"Timer\"):\n        super().__init__(name, component)\n        # the default value is the specified initial value\n        self._value = initial_value\n        # is the timer paused?\n        self._paused = False\n        # initialize the timer's minutes/seconds representation\n        self._min = \"\"\n        self._sec = \"\"\n        # by default, each tick is 1 second\n        self._interval = 1\n\n    # runs the thread\n    def run(self):\n        self._running = True\n        while (self._running):\n            if (not self._paused):\n                # update the timer and display its value on the 7-segment display\n                self._update()\n                self._component.print(str(self))\n                # wait 1s (default) and continue\n                sleep(self._interval)\n                # the timer has expired -> phase failed (explode)\n                if (self._value == 0):\n                    self._running = False\n                self._value -= 1\n            else:\n                sleep(0.1)\n\n    # updates the timer (only internally called)\n    def _update(self):\n        self._min = f\"{self._value // 60}\".zfill(2)\n        self._sec = f\"{self._value % 60}\".zfill(2)\n\n    # pauses and unpauses the timer\n    def pause(self):\n        # toggle the paused state\n        self._paused = not self._paused\n        # blink the 7-segment display when paused\n        self._component.blink_rate = (2 if self._paused else 0)\n\n    # returns the timer as a string (mm:ss)\n    def __str__(self):\n        return f\"{self._min}:{self._sec}\"\n\n# the keypad phase\nclass Keypad(PhaseThread):\n    def __init__(self, component, target, name=\"Keypad\"):\n        super().__init__(name, component, target)\n        # the default value is an empty string\n        self._value = \"\"\n\n    # runs the thread\n    def run(self):\n        self._running = True\n        while (self._running):\n            # process keys when keypad key(s) are pressed\n            if (self._component.pressed_keys):\n                # debounce\n                while (self._component.pressed_keys):\n                    try:\n                        # just grab the first key pressed if more than one were pressed\n                        key = self._component.pressed_keys[0]\n                    except:\n                        key = \"\"\n                    sleep(0.1)\n                # log the key\n                self._value += str(key)\n                # the combination is correct -> phase defused\n                if (self._value == self._target):\n                    self._defused = True\n                # the combination is incorrect -> phase failed (strike)\n                elif (self._value != self._target[0:len(self._value)]):\n                    self._failed = True\n            sleep(0.1)\n\n    # returns the keypad combination as a string\n    def __str__(self):\n        if (self._defused):\n            return \"DEFUSED\"\n        else:\n            return self._value\n\n# the jumper wires phase\nclass Wires(PhaseThread):\n    def __init__(self, pins, component, target, name=\"Wires\"):\n        super().__init__(name, component, target)\n        self._pins = pins\n        self._value =\"\"\n\n    # runs the thread\n    def run(self):\n        # TODO\n        self._running = True\n        while (True):\n            # get the jumper wire states (0->False, 1->True)\n            self._value = \"\".join([str(int(pin.value)) for pin in self._pins])\n            sleep(0.1)\n        self._running = False\n\n    # returns the jumper wires state as a string\n    def __str__(self):\n        if (self._defused):\n            return \"DEFUSED\"\n        else:\n            # TODO\n            return f\"{self._value}/{int(self._value, 2)}\"\n\n# the pushbutton phase\nclass Button(PhaseThread):\n    def __init__(self, component_state, component_rgb, target, color, timer, name=\"Button\"):\n        super().__init__(name, component_state, target)\n        # the default value is False/Released\n        self._value = False\n        # has the pushbutton been pressed?\n        self._pressed = False\n        # we need the pushbutton's RGB pins to set its color\n        self._rgb = component_rgb\n        # the pushbutton's randomly selected LED color\n        self._color = color\n        # we need to know about the timer (7-segment display) to be able to determine correct pushbutton releases in some cases\n        self._timer = timer\n\n    # runs the thread\n    def run(self):\n        self._running = True\n        # set the RGB LED color\n        self._rgb[0].value = False if self._color == \"R\" else True\n        self._rgb[1].value = False if self._color == \"G\" else True\n        self._rgb[2].value = False if self._color == \"B\" else True\n        while (self._running):\n            # get the pushbutton's state\n            self._value = self._component.value\n            # it is pressed\n            if (self._value):\n                # note it\n                self._pressed = True\n            # it is released\n            else:\n                # was it previously pressed?\n                if (self._pressed):\n                    # check the release parameters\n                    # for R, nothing else is needed\n                    # for G or B, a specific digit must be in the timer (sec) when released\n                    if (not self._target or self._target in self._timer._sec):\n                        self._defused = True\n                    else:\n                        self._failed = True\n                    # note that the pushbutton was released\n                    self._pressed = False\n            sleep(0.1)\n\n    # returns the pushbutton's state as a string\n    def __str__(self):\n        if (self._defused):\n            return \"DEFUSED\"\n        else:\n            return str(\"Pressed\" if self._value else \"Released\")\n\n# the toggle switches phase\nclass Toggles(PhaseThread):\n    def __init__(self, pins, component, target, name=\"Toggles\"):\n        super().__init__(name, component, target)\n        self._value = \"\"\n        # the toggle switch pins\n        self._pins = pins\n\n    # runs the thread\n    def run(self):\n        self._running = True\n        while (True):\n            # get the toggle switch values (0->False, 1->True)\n            self._value = \"\".join([str(int(pin.value)) for pin in self._pins])\n            sleep(0.1)\n        self._running = False\n\n    # returns the toggle switches state as a string\n    def __str__(self):\n        if (self._defused):\n            return \"DEFUSED\"\n        else:\n            return f\"{self._value}/{int(self._value, 2)}\"\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bomb_phases.py b/bomb_phases.py
--- a/bomb_phases.py	(revision d7973f0b38040897c1ad254155a43287dfc57952)
+++ b/bomb_phases.py	(date 1745257627679)
@@ -304,7 +304,7 @@
 # the toggle switches phase
 class Toggles(PhaseThread):
     def __init__(self, pins, component, target, name="Toggles"):
-        super().__init__(name, component, target)
+        super().__init__(name = name, component = component, target = target)
         self._value = ""
         # the toggle switch pins
         self._pins = pins
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"13b954fd-cd97-43b3-abc3-8b22463c55d7\" name=\"Changes\" comment=\"bomb phases -&gt; toggles class\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;dayflay&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\"><![CDATA[{\n  \"selectedUrlAndAccountId\": {\n    \"url\": \"https://github.com/dayflay/final-project.git\",\n    \"accountId\": \"c916f783-d6ad-4d4f-89d2-a6a328b6dae4\"\n  }\n}]]></component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 4\n}</component>\n  <component name=\"ProjectId\" id=\"2vBN3mvItItH7et6uPp5Nhevu4M\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"RunOnceActivity.git.unshallow\": \"true\",\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"git-widget-placeholder\": \"main\",\n    \"last_opened_file_path\": \"C:/Users/flate/OneDrive/Desktop/Classes/CompSci2/final-project/modules\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"C:\\Users\\flate\\OneDrive\\Desktop\\Classes\\CompSci2\\final-project\\modules\" />\n    </key>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-js-predefined-d6986cc7102b-deb605915726-JavaScript-PY-243.22562.220\" />\n        <option value=\"bundled-python-sdk-0fc6c617c4bd-9a18a617cbe4-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-243.22562.220\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"13b954fd-cd97-43b3-abc3-8b22463c55d7\" name=\"Changes\" comment=\"\" />\n      <created>1743614311055</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1743614311055</updated>\n      <workItem from=\"1745255121223\" duration=\"625000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Create abstract class for modules\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1743614476479</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1743614476479</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"test\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1744998073281</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1744998073281</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"test\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1744998136181</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1744998136181</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"bomb phases -&gt; toggles class\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1745255628350</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1745255628350</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"5\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Create abstract class for modules\" />\n    <MESSAGE value=\"test\" />\n    <MESSAGE value=\"moved quit button closer to pause\" />\n    <MESSAGE value=\"Merge remote-tracking branch 'origin/main'\" />\n    <MESSAGE value=\"bomb phases -&gt; toggles class\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"bomb phases -&gt; toggles class\" />\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/final_project$bomb.coverage\" NAME=\"bomb Coverage Results\" MODIFIED=\"1744997988259\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/final_project$bomb_test.coverage\" NAME=\"bomb-test Coverage Results\" MODIFIED=\"1744997668815\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n    <SUITE FILE_PATH=\"coverage/final_project$bomb_phases.coverage\" NAME=\"bomb_phases Coverage Results\" MODIFIED=\"1744998033821\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision d7973f0b38040897c1ad254155a43287dfc57952)
+++ b/.idea/workspace.xml	(date 1745257607111)
@@ -4,7 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="13b954fd-cd97-43b3-abc3-8b22463c55d7" name="Changes" comment="bomb phases -&gt; toggles class" />
+    <list default="true" id="13b954fd-cd97-43b3-abc3-8b22463c55d7" name="Changes" comment="bomb phases -&gt; toggles class">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -26,12 +28,12 @@
     &quot;assignee&quot;: &quot;dayflay&quot;
   }
 }</component>
-  <component name="GithubPullRequestsUISettings"><![CDATA[{
-  "selectedUrlAndAccountId": {
-    "url": "https://github.com/dayflay/final-project.git",
-    "accountId": "c916f783-d6ad-4d4f-89d2-a6a328b6dae4"
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/dayflay/final-project.git&quot;,
+    &quot;accountId&quot;: &quot;c916f783-d6ad-4d4f-89d2-a6a328b6dae4&quot;
   }
-}]]></component>
+}</component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 4
 }</component>
@@ -40,21 +42,21 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "ASKED_SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "RunOnceActivity.git.unshallow": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "git-widget-placeholder": "main",
-    "last_opened_file_path": "C:/Users/flate/OneDrive/Desktop/Classes/CompSci2/final-project/modules",
-    "node.js.detected.package.eslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/flate/OneDrive/Desktop/Classes/CompSci2/final-project/modules&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="C:\Users\flate\OneDrive\Desktop\Classes\CompSci2\final-project\modules" />
@@ -77,6 +79,7 @@
       <option name="presentableId" value="Default" />
       <updated>1743614311055</updated>
       <workItem from="1745255121223" duration="625000" />
+      <workItem from="1745255754575" duration="1846000" />
     </task>
     <task id="LOCAL-00001" summary="Create abstract class for modules">
       <option name="closed" value="true" />
@@ -110,7 +113,15 @@
       <option name="project" value="LOCAL" />
       <updated>1745255628350</updated>
     </task>
-    <option name="localTasksCounter" value="5" />
+    <task id="LOCAL-00005" summary="bomb phases -&gt; toggles class">
+      <option name="closed" value="true" />
+      <created>1745255775105</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1745255775105</updated>
+    </task>
+    <option name="localTasksCounter" value="6" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
